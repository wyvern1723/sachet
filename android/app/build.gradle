plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "io.github.wyvern1723.sachet"
    // compileSdkVersion flutter.compileSdkVersion
    compileSdkVersion 35
    // ndkVersion flutter.ndkVersion
    ndkVersion = "26.1.10909125"

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "io.github.wyvern1723.sachet"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            keyAlias = keystoreProperties['keyAlias']
            keyPassword = keystoreProperties['keyPassword']
            storeFile = keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword = keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            // 如果配置了 key.properties 文件，使用配置的方法签名
            if (keystorePropertiesFile.exists()) {
                signingConfig = signingConfigs.release
            } else {
                // 不存在，使用 debug 签名
                signingConfig = signingConfigs.debug
            }
            // 在 android/gradle.properties 添加一行 e.g., "targetAbisForBuild=arm64-v8a,"、"targetAbisForBuild=arm64-v8a,armeabi-v7a"，来设定 abiFilters
            if (project.hasProperty('targetAbisForBuild')) {
                String abis = project.targetAbisForBuild
                if (abis != null && !abis.trim().isEmpty()) {
                    ndk {
                        abiFilters.clear()
                        abiFilters.addAll(abis.split(',').collect { it.trim() })
                    }
                    println "NDK abiFilters set from gradle.properties: ${abis}"
                } else {
                    println "targetAbisForBuild is empty or not defined correctly in gradle.properties"
                }
            } else {
                println "targetAbisForBuild property not found in gradle.properties. Using default NDK settings."
                // 可以设置默认的 ndk.abiFilters 如果属性未找到
                // ndk {
                //     abiFilters 'arm64-v8a', 'armeabi-v7a'
                // }
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.4'
}
